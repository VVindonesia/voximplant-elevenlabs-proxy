// –ì–û–õ–û–°–û–í–û–ô AI –ê–°–°–ò–°–¢–ï–ù–¢ –° GROQ
// Voximplant + STT + Groq LLM + ElevenLabs TTS

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
const CONFIG = {
    TTS_SERVER: 'https://voximplant-elevenlabs-proxy.onrender.com',
    GROQ_API: 'https://api.groq.com/openai/v1/chat/completions',
    GROQ_MODEL: 'llama-3.1-70b-versatile', // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: 'mixtral-8x7b-32768', 'llama-3.1-8b-instant'
};

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–æ–Ω–∫–æ–≤
VoxEngine.addEventListener(AppEvents.CallAlerting, (e) => {
    Logger.write("üî• –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç: " + e.call.number());
    
    e.call.answer();
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–≤–æ–Ω—è—â–µ–≥–æ
    const conversationContext = {
        messages: [
            {
                role: "system", 
                content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π IT –∫–æ–º–ø–∞–Ω–∏–∏. 
                
                –ü—Ä–∞–≤–∏–ª–∞:
                - –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
                - –ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
                - –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
                - –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –Ω–æ –Ω–µ –∑–∞–∏—Å–∫–∏–≤–∞—é—â–∏–º
                - –ü–æ–º–æ–≥–∞–π —Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
                
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:
                - –ó–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ü–û –∏ IT-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–º
                - –†–∞–±–æ—Ç–∞–µ–º –ø–Ω-–ø—Ç —Å 9 –¥–æ 18
                - –ï—Å—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂`
            }
        ],
        phoneNumber: e.call.number(),
        callStartTime: new Date()
    };
    
    e.call.addEventListener(CallEvents.Connected, async () => {
        Logger.write("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º Groq AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞");
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await speakToUser(e.call, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, —è AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
        startConversation(e.call, conversationContext);
    });
    
    e.call.addEventListener(CallEvents.Disconnected, () => {
        Logger.write("üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + 
            Math.round((new Date() - conversationContext.callStartTime) / 1000) + " —Å–µ–∫");
    });
});

// –§—É–Ω–∫—Ü–∏—è TTS —á–µ—Ä–µ–∑ ElevenLabs
async function speakToUser(call, text) {
    Logger.write("üó£Ô∏è AI –≥–æ–≤–æ—Ä–∏—Ç: " + text);
    
    try {
        const response = await Net.httpRequestAsync(CONFIG.TTS_SERVER + '/tts', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            postData: JSON.stringify({
                text: text,
                provider: 'elevenlabs'
            }),
            timeout: 15000
        });
        
        if (response.code === 200) {
            const result = JSON.parse(response.text);
            if (result.success && result.url) {
                Logger.write("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º: " + result.url);
                
                return new Promise((resolve) => {
                    call.startPlayback(result.url, false);
                    call.addEventListener(CallEvents.PlaybackFinished, () => {
                        resolve();
                    });
                });
            }
        }
        
        throw new Error("TTS failed");
        
    } catch (error) {
        Logger.write("‚ùå –û—à–∏–±–∫–∞ TTS: " + error);
        // Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π TTS
        call.say(text, Language.RU_RUSSIAN_FEMALE);
        return Promise.resolve();
    }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
function startConversation(call, context) {
    Logger.write("üëÇ –°–ª—É—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
    call.record({
        record_on_answer: false,
        stereo: false,
        max_duration: 15000,      // 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        silence_timeout: 3000,    // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã = –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã
        transcribe: true,         // –í–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é Voximplant
        language: "ru-RU"
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏
    call.addEventListener(CallEvents.RecordStopped, async (e) => {
        Logger.write("üé§ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        
        if (e.transcription && e.transcription.trim().length > 0) {
            const userText = e.transcription.trim();
            Logger.write("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + userText);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (isGoodbyeMessage(userText)) {
                await speakToUser(call, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!");
                setTimeout(() => call.hangup(), 2000);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Groq
            const aiResponse = await getGroqResponse(userText, context);
            
            if (aiResponse) {
                // –ì–æ–≤–æ—Ä–∏–º –æ—Ç–≤–µ—Ç
                await speakToUser(call, aiResponse);
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
                setTimeout(() => {
                    startConversation(call, context);
                }, 500);
            } else {
                // –û—à–∏–±–∫–∞ AI - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
                await speakToUser(call, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?");
                setTimeout(() => {
                    startConversation(call, context);
                }, 1000);
            }
            
        } else {
            Logger.write("‚ö†Ô∏è –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞");
            await speakToUser(call, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø–ª–æ—Ö–æ —Å–ª—ã—à–Ω–æ. –ì–æ–≤–æ—Ä–∏—Ç–µ –≥—Ä–æ–º—á–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.");
            setTimeout(() => {
                startConversation(call, context);
            }, 1000);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø–∏—Å–∏
    call.addEventListener(CallEvents.RecordFailed, async (e) => {
        Logger.write("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: " + e.reason);
        await speakToUser(call, "–í–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.");
        call.hangup();
    });
}

// –ó–∞–ø—Ä–æ—Å –∫ Groq LLM
async function getGroqResponse(userMessage, context) {
    Logger.write("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Groq: " + userMessage);
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.messages.push({
            role: "user",
            content: userMessage
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if (context.messages.length > 11) {
            context.messages = [
                context.messages[0], // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                ...context.messages.slice(-10)
            ];
        }
        
        const response = await Net.httpRequestAsync(CONFIG.GROQ_API, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + 'YOUR_GROQ_API_KEY' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
            },
            postData: JSON.stringify({
                model: CONFIG.GROQ_MODEL,
                messages: context.messages,
                max_tokens: 150,        // –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
                temperature: 0.7,      // –ù–µ–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                stream: false
            }),
            timeout: 10000
        });
        
        Logger.write("üì° –û—Ç–≤–µ—Ç Groq (–∫–æ–¥): " + response.code);
        
        if (response.code === 200) {
            const result = JSON.parse(response.text);
            const aiMessage = result.choices[0].message.content.trim();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.messages.push({
                role: "assistant",
                content: aiMessage
            });
            
            Logger.write("ü§ñ Groq –æ—Ç–≤–µ—Ç–∏–ª: " + aiMessage);
            return aiMessage;
            
        } else {
            Logger.write("‚ùå –û—à–∏–±–∫–∞ Groq API: " + response.text);
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å?";
        }
        
    } catch (error) {
        Logger.write("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq: " + error);
        return "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Å–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å AI. –ú–æ–≥—É –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?";
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ—Ä–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
function isGoodbyeMessage(text) {
    const goodbyePhrases = [
        '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–≤—Å—ë', '—Ö–≤–∞—Ç–∏—Ç', 
        '–∫–æ–Ω–µ—Ü', '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '–∑–∞–∫–æ–Ω—á–∏—Ç—å', '–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ'
    ];
    
    const lowerText = text.toLowerCase();
    return goodbyePhrases.some(phrase => lowerText.includes(phrase));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
async function transferToOperator(call, reason = "–ø–æ –∑–∞–ø—Ä–æ—Å—É") {
    Logger.write("üë• –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: " + reason);
    
    await speakToUser(call, "–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞—é –≤–∞—Å –Ω–∞ –∂–∏–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –û–¥–∏–Ω –º–æ–º–µ–Ω—Ç.");
    
    // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    // const operatorCall = VoxEngine.callSIP("operator@company.com");
    // ... –ª–æ–≥–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
    await speakToUser(call, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞.");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
VoxEngine.addEventListener(AppEvents.CallFailed, (e) => {
    Logger.write("‚ùå –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞: " + e.reason);
});

VoxEngine.addEventListener(AppEvents.Terminating, () => {
    Logger.write("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞");
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function debugLog(stage, data) {
    Logger.write(`[DEBUG ${stage}] ${JSON.stringify(data)}`);
}
